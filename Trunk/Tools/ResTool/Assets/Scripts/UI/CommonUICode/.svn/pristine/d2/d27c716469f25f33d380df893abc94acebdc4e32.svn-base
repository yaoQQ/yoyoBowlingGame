using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

#if !TOOL
using XLua;
[LuaCallCSharp]
#endif

//[ExecuteInEditMode]
[DisallowMultipleComponent]
[RequireComponent(typeof(RectTransform))]
public partial class BannerWidget : IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler
{
    public enum MovementType
    {
        Unrestricted, // Unrestricted movement -- can scroll forever
        Elastic, // Restricted but flexible -- can go past the edges, but springs back in place
        Clamped, // Restricted movement where it's not possible to go past the edges
    }

    public enum ScrollbarVisibility
    {
        Permanent,
        AutoHide,
        AutoHideAndExpandViewport,
    }

    [SerializeField]
    private RectTransform m_Content;
    public RectTransform content { get { return m_Content; } set { m_Content = value; } }

    [SerializeField]
    private bool m_Horizontal = true;
    public bool horizontal { get { return m_Horizontal; } set { m_Horizontal = value; } }

    [SerializeField]
    private bool m_Vertical = true;
    public bool vertical { get { return m_Vertical; } set { m_Vertical = value; } }

    [SerializeField]
    private MovementType m_MovementType = MovementType.Elastic;
    public MovementType movementType { get { return m_MovementType; } set { m_MovementType = value; } }

    [SerializeField]
    private float m_Elasticity = 0.1f; // Only used for MovementType.Elastic
    public float elasticity { get { return m_Elasticity; } set { m_Elasticity = value; } }

    [SerializeField]
    private bool m_Inertia = true;
    public bool inertia { get { return m_Inertia; } set { m_Inertia = value; } }

    //[SerializeField]
    private float m_DecelerationRate = 0.135f; // Only used when inertia is enabled
    public float decelerationRate { get { return m_DecelerationRate; } set { m_DecelerationRate = value; } }

    private RectTransform m_Viewport;
    protected RectTransform viewport { get { return m_Viewport; } set { m_Viewport = value; SetDirtyCaching(); } }


    // The offset from handle position to mouse down position
    private Vector2 m_PointerStartLocalCursor = Vector2.zero;
    protected Vector2 m_ContentStartPosition = Vector2.zero;

    [SerializeField]
    private RectTransform m_ViewRect;

    public RectTransform viewRect
    {
        get
        {
            if (m_ViewRect == null)
                m_ViewRect = m_Viewport;
            if (m_ViewRect == null)
                m_ViewRect = (RectTransform)transform;
            return m_ViewRect;
        }
        set { m_ViewRect = value; }
    }

    protected Bounds m_ContentBounds;
    private Bounds m_ViewBounds;

    private Vector2 m_Velocity;
    public Vector2 velocity { get { return m_Velocity; } set { m_Velocity = value; } }

    private bool m_Dragging;

    private Vector2 m_PrevPosition = Vector2.zero;
    private Bounds m_PrevContentBounds;
    private Bounds m_PrevViewBounds;

    [System.NonSerialized]
    private RectTransform m_Rect;
    private RectTransform rectTransform
    {
        get
        {
            if (m_Rect == null)
                m_Rect = GetComponent<RectTransform>();
            return m_Rect;
        }
    }

    [SerializeField]
    private float m_horizontalSpace = 50f;
    public float horizontalSpace
    {
        get { return m_horizontalSpace; }
        set { m_horizontalSpace = value; }
    }

    private RectTransform[] m_viewList = new RectTransform[3];
    public RectTransform[] viewList
    {
        get { return m_viewList; }
    }
    private List<object> m_dataList = new List<object>();
    private Action<GameObject, object, int> m_onUpdateCellData;

    private int m_dataIndex = 0;
    public Action<PointerEventData> onFlingEvent;

    private PointerEventData flingEventData;
    private bool m_isActiveFling = false;
    public int dataIndex
    {
        get { return m_dataIndex; }
    }

    [SerializeField]
    private bool m_isVerticleBanner = false;
    public bool isVerticalBanner
    {
        get { return m_isVerticleBanner; }
        set { m_isVerticleBanner = value; }
    }
    /// <summary>
    /// 设置控件数据, 即初始化
    /// </summary>
    /// <param name="p_dataList">逻辑数据集合</param>
    /// <param name="dataIndex">打开控件时显示的数据索引</param>
    /// <param name="p_onUpdateCellData">回调函数</param>
    public void SetBannerData(List<object> p_dataList, int dataIndex, Action<GameObject, object, int> p_onUpdateCellData)
    {
        if (p_dataList == null)
        {
            Debug.LogError("Banner设置错误, 传入数据为空");
            return;
        }
        if (dataIndex < 0 || dataIndex >= p_dataList.Count)
        {
            Debug.LogError("Banner设置错误, 当前数据索引越界");
            return;
        }
        m_dataList = p_dataList;
        m_dataIndex = dataIndex;
        m_onUpdateCellData = p_onUpdateCellData;
        m_onUpdateCellData(m_Content.gameObject, m_dataList[m_dataIndex], m_dataIndex);
        foreach (var rt in m_viewList)
        {
            if (rt != m_Content)
                rt.localScale = Vector3.one;
        }

    }

    protected override void Awake()
    {
        if (viewRect == null)
            return;
        for (int i = 0; i < m_ViewRect.childCount; i++)
        {
            var rt = m_ViewRect.GetChild(i) as RectTransform;
            m_viewList[i] = rt;
        }
        onFlingEvent += onFlingEventHandler;
    }

    private void onFlingEventHandler(PointerEventData eventData)
    {
        if (m_Horizontal && !m_isVerticleBanner)
        {
            if (eventData.delta.x < 0)
            {
                //Debug.Log("往左滑, 下一个");
                if (m_ContentBounds.min.x - m_ViewBounds.min.x < -1 && m_ContentBounds.max.x - m_ViewBounds.max.x < -1)
                {
                    if (m_dataIndex != this.m_dataList.Count - 1)
                    {
                        m_isActiveFling = true;
                        var rightView = this.m_viewList[2];
                        var rightBounds = AdjustBounds(ref rightView);
                        m_nearIndex = m_dataIndex + 1;
                        m_nearRectransform = rightView;
                    }
                }
            }
            else
            {
                //Debug.Log("往右滑, 上一个");
                if (m_ContentBounds.max.x - m_ViewBounds.max.x > 1 && m_ContentBounds.min.x - m_ViewBounds.min.x > 1)
                {
                    if (m_dataIndex != 0)
                    {
                        m_isActiveFling = true;
                        var leftView = this.m_viewList[0];
                        var leftBounds = AdjustBounds(ref leftView);
                        m_nearIndex = m_dataIndex - 1;
                        m_nearRectransform = leftView;
                    }
                }
            }

        }
        if (m_Vertical && m_isVerticleBanner)
        {
            if (eventData.delta.y > 0)
            {
                //Debug.Log("往上滑, 下一个");
                if (m_ContentBounds.max.y - m_ViewBounds.max.y > 1 && m_ContentBounds.min.y - m_ViewBounds.min.y > 1)
                {
                    if (m_dataIndex != this.m_dataList.Count - 1)
                    {
                        m_isActiveFling = true;
                        var rightView = this.m_viewList[2];
                        var rightBounds = AdjustBounds(ref rightView);
                        m_nearIndex = m_dataIndex + 1;
                        m_nearRectransform = rightView;
                    }
                }
            }
            else
            {
                //Debug.Log("往下滑, 上一个");
                if (m_ContentBounds.min.y - m_ViewBounds.min.y < -1 && m_ContentBounds.max.y - m_ViewBounds.max.y < -1)
                {
                    if (m_dataIndex != 0)
                    {
                        m_isActiveFling = true;
                        var leftView = this.m_viewList[0];
                        var leftBounds = AdjustBounds(ref leftView);
                        m_nearIndex = m_dataIndex - 1;
                        m_nearRectransform = leftView;
                    }
                }
            }
        }
    }

    protected override void Start()
    {
        //PhotoView Test
        //Application.targetFrameRate = 30;
        //var testDataList = new List<object> { 0, 1, 2 };
        //SetBannerData(testDataList, 0, (go, data, i) => { Debug.LogFormat("视图{0}, 数据{1}, 索引{2}", go.name, data, i); });
        //AddExEventListener(UIEvent.PointerDoubleClick, (eventData) =>
        //{
        //    if (m_Content.localScale == Vector3.one)
        //    {
        //        //缩放规则
        //        float scale = 1;
        //        if (m_Content.rect.width >= 1080)
        //        {
        //            if (m_Content.rect.height / m_Content.rect.width > 1)
        //                scale = 2;
        //            else
        //                scale = viewRect.rect.height / m_Content.rect.height;
        //        }
        //        else
        //            scale = 2;

        //        this.ContentAnimaTo(scale, eventData);
        //    }
        //    else
        //        this.ContentAnimaReset();
        //});

        // Calendar Test
        //var now = System.DateTime.Now;

        //var curSelectedTime = now;
        //var yearsList = UIExEventTool.Years(curSelectedTime);
        //var testDataList = new List<object>();
        //var curDataIndex = 0;
        //for (var i = 0; i < yearsList.Count; i++)
        //{
        //    var year = yearsList[i];
        //    var months = UIExEventTool.Months(year);
        //    for (var j = 0; j < months.Count; j++)
        //    {
        //        testDataList.Add(months[j] as object);
        //    }
        //    if (year.Year == curSelectedTime.Year)
        //    {
        //        var index = (i * 12 + curSelectedTime.Month) - 1;
        //    }
        //}
        //for (var i = 0; i < testDataList.Count; i++)
        //{
        //    var data = (DateTime)testDataList[i];
        //    if (data.Year == curSelectedTime.Year && data.Month == curSelectedTime.Month)
        //        curDataIndex = i;
        //}
        //SetBannerData(testDataList, curDataIndex, (go, data, index) =>
        //{
        //    //Debug.LogFormat("视图{0}, 数据{1}, 索引{2}", go.name, data, i);
        //    var dataTime = (DateTime)data;
        //    for (var i = 0; i < viewList.Length; i++)
        //    {
        //        DateTime showTime = dataTime.AddMonths(i - 1);
        //        ShowView(showTime, viewList[i], curSelectedTime, now);
        //    }

        //});

    }
    private void ShowView(DateTime showDataTime, RectTransform view, DateTime curSelectedTime, DateTime now)
    {
        if (view == null)
            return;
        var days = UIExEventTool.Days(showDataTime);
        for (var i = 0; i < view.childCount; i++)
        {
            var child = view.GetChild(i);
            if (child == null)
                break;
            var text = child.GetComponentInChildren<Text>();
            var icon = child.GetComponent<IconWidget>();
            var dataTime = days[i];
            if (text != null && dataTime != null)
            {
                if (dataTime.Day == 1)
                {
                    text.text = string.Format("{0}月", dataTime.Month);
                }
                else
                {
                    text.text = dataTime.Day.ToString();
                }
                if (dataTime.Day == 1 && dataTime.Month == showDataTime.Month)
                {
                    var hexColor = "#23CEAEFF";
                    Color color;
                    if (ColorUtility.TryParseHtmlString(hexColor, out color))
                        text.color = color;
                }
                else if (dataTime.Month == showDataTime.Month)
                {
                    text.color = Color.black;
                }
                else
                    text.color = Color.gray;
            }
            if (icon != null)
            {
                bool isShow = false;
                if (dataTime.Year == curSelectedTime.Year && dataTime.Month == curSelectedTime.Month && dataTime.Day == curSelectedTime.Day)
                {
                    icon.ChangeIcon(0);
                    isShow = true;
                }
                else if (dataTime.Year == now.Year && dataTime.Month == now.Month && dataTime.Day == now.Day)
                {
                    icon.ChangeIcon(1);
                    isShow = true;
                }

                if (isShow)
                    icon.Img.enabled = true;
                else
                    icon.Img.enabled = false;
            }
            icon.AddExEventListener(UIEvent.PointerShortClick, (eventData) =>
            {
                Debug.Log("点击的时间是: " + dataTime);
            });
        }
    }


    protected override void OnEnable()
    {
        base.OnEnable();
    }

    protected override void OnDisable()
    {
        m_Velocity = Vector2.zero;
        LayoutRebuilder.MarkLayoutForRebuild(rectTransform);
        base.OnDisable();
    }

    public override bool IsActive()
    {
        return base.IsActive() && m_Content != null;
    }

    public virtual void StopMovement()
    {
        m_Velocity = Vector2.zero;
    }

    public virtual void OnInitializePotentialDrag(PointerEventData eventData)
    {
        if (eventData.button != PointerEventData.InputButton.Left)
            return;

        m_Velocity = Vector2.zero;
    }

    private float beginDragTime = 0f;
    private float endDragTime = 0f;
    private const float FlingDuration = 0.15f;
    public virtual void OnBeginDrag(PointerEventData eventData)
    {
        var exClick = GetComponent<UIExClickListener>();
        if (exClick != null)
            exClick.isDragging = true;
        if (eventData.button != PointerEventData.InputButton.Left)
            return;

        if (!IsActive())
            return;

        UpdateBounds();

        m_PointerStartLocalCursor = Vector2.zero;
        RectTransformUtility.ScreenPointToLocalPointInRectangle(viewRect, eventData.position, eventData.pressEventCamera, out m_PointerStartLocalCursor);
        m_ContentStartPosition = m_Content.anchoredPosition;
        m_Dragging = true;
        beginDragTime = Time.unscaledTime;
    }

    public virtual void OnEndDrag(PointerEventData eventData)
    {
        if (eventData.button != PointerEventData.InputButton.Left)
            return;

        m_Dragging = false;
        endDragTime = Time.unscaledTime;
        this.flingEventData = eventData;
    }

    public virtual void OnDrag(PointerEventData eventData)
    {
        if (eventData.button != PointerEventData.InputButton.Left)
            return;

        if (!IsActive())
            return;

        Vector2 localCursor;
        if (!RectTransformUtility.ScreenPointToLocalPointInRectangle(viewRect, eventData.position, eventData.pressEventCamera, out localCursor))
            return;

        UpdateBounds();

        var pointerDelta = localCursor - m_PointerStartLocalCursor;
        Vector2 position = m_ContentStartPosition + pointerDelta;

        // Offset to get content into place in the view.
        Vector2 offset = CalculateOffset(position - m_Content.anchoredPosition);
        //Debug.Log("pointerDelta = " + pointerDelta);
        //Debug.Log("offset = " + offset);
        // 如果处于边缘, 并且是往非边缘方向移动, 在非放大模式时, 并且在未越界时, 使用橡胶弹性; 否则直接使用滑动值
        if ((m_dataIndex == 0 && offset.x < 0) || (m_dataIndex == m_dataList.Count - 1 && offset.x > 0) || m_Content.localScale != Vector3.one && m_isCrossViewBounds == false)
        {
            position += offset;
            if (m_MovementType == MovementType.Elastic)
            {
                if (offset.x != 0)
                    position.x = position.x - RubberDelta(offset.x, m_ViewBounds.size.x);
                if (offset.y != 0)
                    position.y = position.y - RubberDelta(offset.y, m_ViewBounds.size.y);
            }
        }
        //Debug.Log("position = " + position);

        SetContentAnchoredPosition(position);
        UpdateOtherItem();

    }

    protected virtual void SetContentAnchoredPosition(Vector2 position)
    {
        if (!m_Horizontal)
            position.x = m_Content.anchoredPosition.x;
        if (!m_Vertical)
            position.y = m_Content.anchoredPosition.y;

        if (position != m_Content.anchoredPosition)
        {
            m_Content.anchoredPosition = position;
            UpdateBounds();
        }
    }

    protected virtual void LateUpdate()
    {
        if (!m_Content)
            return;

        UpdateBounds();
        float deltaTime = Time.unscaledDeltaTime;
        Vector2 offset = CalculateOffset(Vector2.zero);
        if (!m_Dragging && (offset != Vector2.zero || m_Velocity != Vector2.zero))
        {
            Vector2 position = m_Content.anchoredPosition;
            for (int axis = 0; axis < 2; axis++)
            {
                // Apply spring physics if movement is elastic and content has an offset from the view.
                if (m_MovementType == MovementType.Elastic && offset[axis] != 0)
                {
                    float speed = m_Velocity[axis];
                    position[axis] = Mathf.SmoothDamp(m_Content.anchoredPosition[axis], m_Content.anchoredPosition[axis] + offset[axis], ref speed, m_Elasticity, Mathf.Infinity, deltaTime);
                    if (Mathf.Abs(speed) < 1)
                        speed = 0;
                    m_Velocity[axis] = speed;
                }
                // Else move content according to velocity with deceleration applied.
                else if (m_Inertia)
                {
                    m_Velocity[axis] *= Mathf.Pow(m_DecelerationRate, deltaTime);
                    if (Mathf.Abs(m_Velocity[axis]) < 1)
                        m_Velocity[axis] = 0;
                    position[axis] += m_Velocity[axis] * deltaTime;
                }
                // If we have neither elaticity or friction, there shouldn't be any velocity.
                else
                {
                    m_Velocity[axis] = 0;
                }
            }

            if (m_MovementType == MovementType.Clamped)
            {
                offset = CalculateOffset(position - m_Content.anchoredPosition);
                position += offset;
            }

            SetContentAnchoredPosition(position);
            UpdateOtherItem();
        }

        if (m_Dragging && m_Inertia)
        {
            Vector3 newVelocity = (m_Content.anchoredPosition - m_PrevPosition) / deltaTime;
            m_Velocity = Vector3.Lerp(m_Velocity, newVelocity, deltaTime * 10);
        }

        if (m_ViewBounds != m_PrevViewBounds || m_ContentBounds != m_PrevContentBounds || m_Content.anchoredPosition != m_PrevPosition)
        {
            UpdatePrevData();
        }
        if (m_isActiveFling)
        {
            AdjustOtherItem();
        }
    }

    protected void UpdatePrevData()
    {
        if (m_Content == null)
            m_PrevPosition = Vector2.zero;
        else
            m_PrevPosition = m_Content.anchoredPosition;
        m_PrevViewBounds = m_ViewBounds;
        m_PrevContentBounds = m_ContentBounds;
    }

    private static float RubberDelta(float overStretching, float viewSize)
    {
        return (1 - (1 / ((Mathf.Abs(overStretching) * 0.55f / viewSize) + 1))) * viewSize * Mathf.Sign(overStretching);
    }

    protected void UpdateBounds()
    {
        m_ViewBounds = new Bounds(viewRect.rect.center, viewRect.rect.size);
        m_ContentBounds = GetBounds();

        if (m_Content == null)
            return;

        Vector3 contentSize = m_ContentBounds.size;
        Vector3 contentPos = m_ContentBounds.center;
        var contentPivot = m_Content.pivot;
        AdjustBounds(ref m_ViewBounds, ref contentPivot, ref contentSize, ref contentPos);
        m_ContentBounds.size = contentSize;
        m_ContentBounds.center = contentPos;

        if (movementType == MovementType.Clamped)
        {
            // Adjust content so that content bounds bottom (right side) is never higher (to the left) than the view bounds bottom (right side).
            // top (left side) is never lower (to the right) than the view bounds top (left side).
            // All this can happen if content has shrunk.
            // This works because content size is at least as big as view size (because of the call to InternalUpdateBounds above).
            Vector2 delta = Vector2.zero;
            if (m_ViewBounds.max.x > m_ContentBounds.max.x)
            {
                delta.x = Math.Min(m_ViewBounds.min.x - m_ContentBounds.min.x, m_ViewBounds.max.x - m_ContentBounds.max.x);
            }
            else if (m_ViewBounds.min.x < m_ContentBounds.min.x)
            {
                delta.x = Math.Max(m_ViewBounds.min.x - m_ContentBounds.min.x, m_ViewBounds.max.x - m_ContentBounds.max.x);
            }

            if (m_ViewBounds.min.y < m_ContentBounds.min.y)
            {
                delta.y = Math.Max(m_ViewBounds.min.y - m_ContentBounds.min.y, m_ViewBounds.max.y - m_ContentBounds.max.y);
            }
            else if (m_ViewBounds.max.y > m_ContentBounds.max.y)
            {
                delta.y = Math.Min(m_ViewBounds.min.y - m_ContentBounds.min.y, m_ViewBounds.max.y - m_ContentBounds.max.y);
            }
            if (delta.sqrMagnitude > float.Epsilon)
            {
                contentPos = m_Content.anchoredPosition + delta;
                if (!m_Horizontal)
                    contentPos.x = m_Content.anchoredPosition.x;
                if (!m_Vertical)
                    contentPos.y = m_Content.anchoredPosition.y;
                AdjustBounds(ref m_ViewBounds, ref contentPivot, ref contentSize, ref contentPos);
            }
        }
    }

    internal static void AdjustBounds(ref Bounds viewBounds, ref Vector2 contentPivot, ref Vector3 contentSize, ref Vector3 contentPos)
    {
        // Make sure content bounds are at least as large as view by adding padding if not.
        // One might think at first that if the content is smaller than the view, scrolling should be allowed.
        // However, that's not how scroll views normally work.
        // Scrolling is *only* possible when content is *larger* than view.
        // We use the pivot of the content rect to decide in which directions the content bounds should be expanded.
        // E.g. if pivot is at top, bounds are expanded downwards.
        // This also works nicely when ContentSizeFitter is used on the content.
        Vector3 excess = viewBounds.size - contentSize;
        if (excess.x > 0)
        {
            contentPos.x -= excess.x * (contentPivot.x - 0.5f);
            contentSize.x = viewBounds.size.x;
        }
        if (excess.y > 0)
        {
            contentPos.y -= excess.y * (contentPivot.y - 0.5f);
            contentSize.y = viewBounds.size.y;
        }
    }

    private RectTransform m_nearRectransform = null;
    private int m_nearIndex = -1;
    private bool m_isCrossViewBounds = false;
    private void UpdateOtherItem()
    {
        if (m_dataList.Count == 0)
            return;
        if (m_isActiveFling)
            return;
        if (m_isVerticleBanner)
        {
            //Debug.Log("往上滑, 下一个");
            if (m_ContentBounds.max.y - m_ViewBounds.max.y > 1 && m_ContentBounds.min.y - m_ViewBounds.min.y > 1)
            {
                m_isCrossViewBounds = true;
                if (m_dataIndex != this.m_dataList.Count - 1)
                {
                    AdjustOtherItem();
                    var rightView = this.m_viewList[2];
                    var rightBounds = AdjustBounds(ref rightView);
                    if (rightBounds.center.y > m_ViewBounds.min.y && m_nearIndex == -1)
                    {
                        //Debug.Log("非抛掷事件, 数据切换下一张");
                        m_nearIndex = m_dataIndex + 1;
                        m_nearRectransform = rightView;
                    }
                }
            }
            //Debug.Log("往下滑, 上一个");
            else if (m_ContentBounds.min.y - m_ViewBounds.min.y < -1 && m_ContentBounds.max.y - m_ViewBounds.max.y < -1)
            {
                m_isCrossViewBounds = true;
                if (m_dataIndex != 0)
                {
                    AdjustOtherItem();
                    var leftView = this.m_viewList[0];
                    var leftBounds = AdjustBounds(ref leftView);
                    //Debug.Log("leftBounds.max.y = "+ leftBounds.max.y);
                    if (leftBounds.center.y < m_ViewBounds.max.y && m_nearIndex == -1)
                    {
                        //Debug.Log("非抛掷事件, 数据切换上一张");
                        m_nearIndex = m_dataIndex - 1;
                        m_nearRectransform = leftView;
                    }
                }
            }
        }
        else
        {
            if (m_ContentBounds.min.x - m_ViewBounds.min.x < -1 && m_ContentBounds.max.x - m_ViewBounds.max.x < -1)
            {
                //Debug.Log("往左移超出边界");
                m_isCrossViewBounds = true;
                if (m_dataIndex != this.m_dataList.Count - 1)
                {
                    AdjustOtherItem();
                    var rightView = this.m_viewList[2];
                    var rightBounds = AdjustBounds(ref rightView);
                    if (rightBounds.center.x < m_ViewBounds.max.x && m_nearIndex == -1)
                    {
                        //Debug.Log("非抛掷事件, 数据切换下一张");
                        m_nearIndex = m_dataIndex + 1;
                        m_nearRectransform = rightView;
                    }
                }
            }
            else if (m_ContentBounds.max.x - m_ViewBounds.max.x > 1 && m_ContentBounds.min.x - m_ViewBounds.min.x > 1)
            {
                //Debug.Log("往右移超出边界");
                m_isCrossViewBounds = true;
                if (m_dataIndex != 0)
                {
                    AdjustOtherItem();
                    var leftView = this.m_viewList[0];
                    var leftBounds = AdjustBounds(ref leftView);
                    if (leftBounds.center.x > m_ViewBounds.min.x && m_nearIndex == -1)
                    {
                        //Debug.Log("非抛掷事件, 数据切换上一张");
                        m_nearIndex = m_dataIndex - 1;
                        m_nearRectransform = leftView;
                    }
                }
            }
        }
    }

    private void AdjustOtherItem()
    {
        for (var i = 0; i < m_viewList.Length; i++)
        {
            var rt = m_viewList[i];
            if (rt == m_Content)
                continue;
            var bounds = AdjustBounds(ref rt);
            var pos = Vector2.zero;
            if (i == 0)
            {
                if (m_isVerticleBanner)
                    pos.y = m_Content.anchoredPosition.y + m_ContentBounds.size.y / 2 + m_horizontalSpace + bounds.size.y / 2;
                else
                    pos.x = m_Content.anchoredPosition.x - m_ContentBounds.size.x / 2 - m_horizontalSpace - bounds.size.x / 2;

            }
            else if (i == m_viewList.Length - 1)
            {
                if (m_isVerticleBanner)
                    pos.y = m_Content.anchoredPosition.y - m_ContentBounds.size.y / 2 - m_horizontalSpace - bounds.size.y / 2;
                else
                    pos.x = m_Content.anchoredPosition.x + m_ContentBounds.size.x / 2 + m_horizontalSpace + bounds.size.x / 2;
            }
            rt.anchoredPosition = pos;
        }
    }

    private void CheckIsFling()
    {
        if (m_dataList.Count == 0)
            return;
        var diffTime = endDragTime - beginDragTime;
        if (diffTime > 0 && diffTime < FlingDuration)
        {
            if (onFlingEvent != null && flingEventData != null)
            {
                onFlingEvent.Invoke(flingEventData);
                flingEventData = null;
                beginDragTime = 0f;
                endDragTime = 0f;
            }
        }
    }
    private Bounds AdjustBounds(ref RectTransform rt)
    {
        if (rt == null)
            return new Bounds();
        rt.GetWorldCorners(m_Corners);
        var viewWorldToLocalMatrix = viewRect.worldToLocalMatrix;
        var bounds = InternalGetBounds(m_Corners, ref viewWorldToLocalMatrix);
        Vector3 contentSize = bounds.size;
        Vector3 contentPos = bounds.center;
        var contentPivot = m_Content.pivot;
        AdjustBounds(ref m_ViewBounds, ref contentPivot, ref contentSize, ref contentPos);
        bounds.size = contentSize;
        bounds.center = contentPos;
        return bounds;
    }
    private void SwichView()
    {
        if (m_nearRectransform == null || m_nearIndex == -1)
            return;
        if (m_dataList.Count == 0)
            return;
        //Debug.Log("视图切换, m_nearIndex = " + m_nearIndex);
        RectTransform[] tempViewList = new RectTransform[3];
        if (m_nearIndex > m_dataIndex)
        {
            tempViewList[0] = m_viewList[1];
            tempViewList[1] = m_viewList[2];
            tempViewList[2] = m_viewList[0];
        }
        else
        {
            tempViewList[0] = m_viewList[2];
            tempViewList[1] = m_viewList[0];
            tempViewList[2] = m_viewList[1];
        }
        m_dataIndex = m_nearIndex;
        m_Content = m_nearRectransform;
        m_viewList = tempViewList;
        foreach (var rt in m_viewList)
        {
            if (rt != m_Content)
                rt.localScale = Vector3.one;
        }
        if (m_isVerticleBanner)
            m_Horizontal = false;
        else
            m_Vertical = false;

        m_onUpdateCellData(m_Content.gameObject, m_dataList[m_dataIndex], m_dataIndex);
    }

    private readonly Vector3[] m_Corners = new Vector3[4];
    private Bounds GetBounds()
    {
        if (m_Content == null)
            return new Bounds();
        m_Content.GetWorldCorners(m_Corners);
        var viewWorldToLocalMatrix = viewRect.worldToLocalMatrix;
        return InternalGetBounds(m_Corners, ref viewWorldToLocalMatrix);
    }

    internal static Bounds InternalGetBounds(Vector3[] corners, ref Matrix4x4 viewWorldToLocalMatrix)
    {
        var vMin = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
        var vMax = new Vector3(float.MinValue, float.MinValue, float.MinValue);

        for (int j = 0; j < 4; j++)
        {
            Vector3 v = viewWorldToLocalMatrix.MultiplyPoint3x4(corners[j]);
            vMin = Vector3.Min(v, vMin);
            vMax = Vector3.Max(v, vMax);
        }

        var bounds = new Bounds(vMin, Vector3.zero);
        bounds.Encapsulate(vMax);
        return bounds;
    }

    private Vector2 CalculateOffset(Vector2 delta)
    {
        return InternalCalculateOffset(ref m_ViewBounds, ref m_ContentBounds, m_Horizontal, m_Vertical, m_MovementType, ref delta);
    }

    internal static Vector2 InternalCalculateOffset(ref Bounds viewBounds, ref Bounds contentBounds, bool horizontal, bool vertical, MovementType movementType, ref Vector2 delta)
    {
        Vector2 offset = Vector2.zero;
        if (movementType == MovementType.Unrestricted)
            return offset;

        Vector2 min = contentBounds.min;
        Vector2 max = contentBounds.max;

        if (horizontal)
        {
            min.x += delta.x;
            max.x += delta.x;
            if (min.x > viewBounds.min.x)
                offset.x = viewBounds.min.x - min.x;
            else if (max.x < viewBounds.max.x)
                offset.x = viewBounds.max.x - max.x;
        }

        if (vertical)
        {
            min.y += delta.y;
            max.y += delta.y;
            if (max.y < viewBounds.max.y)
                offset.y = viewBounds.max.y - max.y;
            else if (min.y > viewBounds.min.y)
                offset.y = viewBounds.min.y - min.y;
        }

        return offset;
    }

    protected void SetDirtyCaching()
    {
        if (!IsActive())
            return;
        LayoutRebuilder.MarkLayoutForRebuild(rectTransform);
    }

    protected void OnPointerUp()
    {
        //Debug.Log("鼠标抬起");
        CheckIsFling();
        SwichView();
    }

    protected void OnPointerDown()
    {
        //Debug.Log("鼠标按下");
        var exClick = GetComponent<UIExClickListener>();
        if (exClick != null)
            exClick.isDragging = false;
        m_nearRectransform = null;
        m_nearIndex = -1;
        m_isCrossViewBounds = false;
        m_isActiveFling = false;
    }

    void Update()
    {
        if (!ProcessTouchEvents())
            ProccessMouseEvent();
    }
    protected void ProccessMouseEvent()
    {
        if (Input.GetKeyDown(KeyCode.Mouse0))
        {
            OnPointerDown();

        }
        if (Input.GetKeyUp(KeyCode.Mouse0))
        {
            OnPointerUp();
        }
    }

    protected bool ProcessTouchEvents()
    {
        for (int i = 0; i < Input.touchCount; ++i)
        {
            Touch touch = Input.GetTouch(i);

            if (touch.type == TouchType.Indirect)
                continue;

            bool pressed = touch.phase == TouchPhase.Began;
            bool released = (touch.phase == TouchPhase.Canceled) || (touch.phase == TouchPhase.Ended);
            if (pressed)
            {
                OnPointerDown();
            }
            if (released)
            {
                OnPointerUp();
            }

        }
        return Input.touchCount > 0;
    }

    public void ContentAnimaTo(float scale, PointerEventData eventData)
    {
        if (m_Content == null)
            return;
        m_Content.localScale = new Vector3(scale, scale, 1);
        var local = UIExEventTool.ScreenToTargetLocal(m_Content.gameObject, viewRect.gameObject, eventData.position, eventData.pressEventCamera); // 点击点的屏幕坐标相对于content局部坐标系的坐标
        m_Content.anchoredPosition = new Vector2(m_Content.anchoredPosition.x - local.x * (scale - 1), m_Content.anchoredPosition.y - local.y * (scale - 1));
        UpdateBounds();

        Vector2 offset = Vector2.zero;
        Vector2 min = m_ContentBounds.min;
        Vector2 max = m_ContentBounds.max;
        if (min.x > m_ViewBounds.min.x)
            offset.x = m_ViewBounds.min.x - min.x;
        else if (max.x < m_ViewBounds.max.x)
            offset.x = m_ViewBounds.max.x - max.x;
        if (max.y < m_ViewBounds.max.y)
            offset.y = m_ViewBounds.max.y - max.y;
        else if (min.y > m_ViewBounds.min.y)
            offset.y = m_ViewBounds.min.y - min.y;
        var position = m_Content.anchoredPosition;
        position += offset;
        m_Content.anchoredPosition = position;
        UpdateBounds();
        if (m_ContentBounds.max.y > m_ViewBounds.max.y && m_ContentBounds.min.y < m_ViewBounds.min.y)
            m_Vertical = true;


    }

    public void ContentAnimaReset()
    {
        if (m_Content == null)
            return;
        m_Content.localScale = Vector3.one;
        m_Content.anchoredPosition = Vector3.zero;
        m_Vertical = false;
    }
}


public partial class BannerWidget : UIBaseWidget
{
    public bool AddExEventListener(UIEvent eventType, Action<PointerEventData> onEventHandler)
    {
        bool sign = true;
        switch (eventType)
        {
            case UIEvent.PointerShortClick:
                UIExClickListener.Get(gameObject).onSingleHandler = onEventHandler;
                break;
            case UIEvent.PointerDoubleClick:
                UIExClickListener.Get(gameObject).onDoubleHandler = onEventHandler;
                break;
            default:
                break;
        }
        return sign;
    }

    public bool RemoveExEventListener(UIEvent eventType, Action<GameObject> onEventHandler)
    {
        bool sign = true;
        switch (eventType)
        {
            case UIEvent.PointerDoubleClick:
                UIExClickListener.Get(gameObject).onDoubleHandler = null;
                break;
            case UIEvent.PointerShortClick:
                UIExClickListener.Get(gameObject).onSingleHandler = null;
                break;
            default:
                break;
        }
        return sign;
    }

    public override bool AddEventListener(UIEvent eventType, Action<PointerEventData> onEventHandler)
    {
        bool sign = true;
        return sign;
    }
    public override bool RemoveEventListener(UIEvent eventType, Action<PointerEventData> onEventHandler)
    {
        bool sign = true;

        return sign;
    }
    public override WidgetType GetWidgetType()
    {
        return WidgetType.Banner;
    }

}